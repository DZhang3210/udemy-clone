// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Store {
    id        String      @id @default(uuid())
    name      String
    userId    String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    billboard Billboard[] @relation("StoreToBillboard")
    Category  Category[]  @relation("StoreToCategory")
    sizes     Size[]      @relation("StoreToSize")
    Color     Color[]     @relation("StoreToColor")
    Product   Product[]   @relation("StoreToProduct")
}

model Billboard {
    id        String     @id @default(uuid())
    storeId   String
    store     Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
    label     String
    imageUrl  String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Category  Category[]

    @@index([storeId])
}

model Category {
    id          String    @id @default(uuid())
    storeId     String
    store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
    billboardId String
    billboard   Billboard @relation(fields: [billboardId], references: [id])
    name        String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Product     Product[] @relation("CategoryToProduct")

    @@index([storeId])
    @@index([billboardId])
}

model Size {
    id        String    @id @default(uuid())
    storeId   String
    store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
    name      String
    value     String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Product   Product[]

    @@index([storeId])
}

model Color {
    id        String    @id @default(uuid())
    storeId   String
    store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
    name      String
    value     String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Product   Product[]

    @@index([storeId])
}

model Product {
    id         String   @id @default(uuid())
    storeId    String
    store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
    categoryId String
    category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
    name       String
    price      Decimal
    isFeatured Boolean  @default(false)
    isArchived Boolean  @default(false)
    sizeId     String
    size       Size     @relation(fields: [sizeId], references: [id])
    colorId    String
    color      Color    @relation(fields: [colorId], references: [id])
    images     Image[]
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([storeId])
    @@index([categoryId])
    @@index([sizeId])
    @@index([colorId])
}

model Image {
    id        String   @id @default(uuid())
    productId String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
}
